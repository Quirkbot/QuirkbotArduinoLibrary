#ifndef Constants_h_
#define Constants_h_

#include <stdint.h>


#define BOT_TIME_INCREMENT_MICROS 1000
#define BOT_TIME_INCREMENT_MILLIS 1
#define BOT_TIME_INCREMENT_SECONDS 0.0000001
#define BOT_SECONDS_TO_MICROS(x) (x * 1000000)
#define BOT_MICROS_TO_SECONDS(x) (x * 0.0000001)
#define BOT_SECONDS_TO_FRAMES(x) ((int)((x * 1000000) / BOT_TIME_INCREMENT_MICROS))
#define BOT_MILLIS_TO_MICROS(x) (x * 1000)
#define BOT_MILLIS_TO_FRAMES(x) ((int)((x * 1000) / BOT_TIME_INCREMENT_MICROS))
#define BOT_NORMALIZED_TO_ANALOG(x) (x * 255)

/**
* Lambda Helpers
**/
//#define function(x)[](x)


static uint8_t isinTable8[] = { 
  0, 4, 9, 13, 18, 22, 27, 31, 35, 40, 44, 
  49, 53, 57, 62, 66, 70, 75, 79, 83, 87, 
  91, 96, 100, 104, 108, 112, 116, 120, 124, 128, 

  131, 135, 139, 143, 146, 150, 153, 157, 160, 164, 
  167, 171, 174, 177, 180, 183, 186, 190, 192, 195, 
  198, 201, 204, 206, 209, 211, 214, 216, 219, 221, 

  223, 225, 227, 229, 231, 233, 235, 236, 238, 240, 
  241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 
  252, 253, 253, 254, 254, 254, 255, 255, 255, 255, 
};

static float fsinTable8[] = { 
	0.00000000,0.01568627,0.03529411,0.05098039,0.07058823,0.08627450,0.10588235,
	0.12156862,0.13725490,0.15686274,0.17254901,0.19215686,0.20784313,0.22352941,
	0.24313725,0.25882352,0.27450980,0.29411764,0.30980392,0.32549019,0.34117647,
	0.35686274,0.37647058,0.39215686,0.40784313,0.42352941,0.43921568,0.45490196,
	0.47058823,0.48627450,0.50196078,0.51372549,0.52941176,0.54509803,0.56078431,
	0.57254901,0.58823529,0.60000000,0.61568627,0.62745098,0.64313725,0.65490196,
	0.67058823,0.68235294,0.69411764,0.70588235,0.71764705,0.72941176,0.74509803,
	0.75294117,0.76470588,0.77647058,0.78823529,0.80000000,0.80784313,0.81960784,
	0.82745098,0.83921568,0.84705882,0.85882352,0.86666666,0.87450980,0.88235294,
	0.89019607,0.89803921,0.90588235,0.91372549,0.92156862,0.92549019,0.93333333,
	0.94117647,0.94509803,0.95294117,0.95686274,0.96078431,0.96470588,0.96862745,
	0.97254901,0.97647058,0.98039215,0.98431372,0.98823529,0.99215686,0.99215686,
	0.99607843,0.99607843,0.99607843,1.00000000,1.00000000,1.00000000,1.00000000
};

static int isin8degrees(int x) {
	bool pos = true;
	uint8_t idx; 
	if (x > 180){
		idx = x - 180;
		pos = !pos;
	}
	else idx = x;
	if (idx > 90) idx = 180 - idx;
	if (pos) return isinTable8[idx]/2 ;
	return -(isinTable8[idx]/2);
}

static float fsin8degrees(int x) {
	bool pos = true;
	uint8_t idx; 
	if (x > 180){
		idx = x - 180;
		pos = !pos;
	}
	else idx = x;
	if (idx > 90) idx = 180 - idx;
	if (pos) return fsinTable8[idx]/2 ;
	return -(fsinTable8[idx]/2);
}

#endif